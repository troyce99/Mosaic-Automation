
-- Copyright (c) 2020, G.A. vd. Hoorn
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
--     http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.


PROGRAM dmh_selprg
--------------------------------------------------------------------------------
--
-- A simple program to SELECT a TP program on the controller.
--
-- author: G.A. vd. Hoorn
--
--------------------------------------------------------------------------------
%ALPHABETIZE
%COMMENT = 'DOMINH//r1'
%INVISIBLE
%NOBUSYLAMP
%NOLOCKGROUP
%NOPAUSE = COMMAND + TPENABLE + ERROR
%UNINITVARS




--------------------------------------------------------------------------------
--
-- remote types & constants
--
--------------------------------------------------------------------------------




--------------------------------------------------------------------------------
--
-- local types & constants
--
--------------------------------------------------------------------------------
CONST
	RESP_FILE    = 'TD:\RESPONSE.HTM'
	RESP_OMODE   = 'RW'




--------------------------------------------------------------------------------
--
-- local variables
--
--------------------------------------------------------------------------------
VAR
	fd_          : FILE
	stat_        : INTEGER
	success_     : BOOLEAN

	-- GET params
	prog_name    : STRING[32]  -- name of TP program (without the extension)




--------------------------------------------------------------------------------
--
-- remote routine prototypes
--
--------------------------------------------------------------------------------




--------------------------------------------------------------------------------
--
-- local routine(s) (prototypes)
--
--------------------------------------------------------------------------------
ROUTINE w_error_(fd : FILE; reason : STRING) FROM dmh_selprg
ROUTINE w_error2_(fd : FILE; reason : STRING; val : INTEGER) FROM dmh_selprg
ROUTINE check_getp_ : INTEGER FROM dmh_selprg
ROUTINE reset_getp_ FROM dmh_selprg




--------------------------------------------------------------------------------
--
-- Body
--
--------------------------------------------------------------------------------
BEGIN
	OPEN FILE fd_(RESP_OMODE, RESP_FILE)
	stat_ = IO_STATUS(fd_)
	IF (stat_ <> 0) THEN
		-- TODO: post some error/warning using POST_ERR
		GOTO lbl_exit0
	ENDIF

	-- make sure all required parameters are provided
	IF (check_getp_ <> 0) THEN
		w_error_(fd_, 'missing parameter')
		GOTO lbl_exit0
	ENDIF

	-- check GET params
	IF (UNINIT(prog_name)) THEN
		w_error_(fd_, 'conversion error')
		GOTO lbl_exit0
	ENDIF

	-- check program name length
	IF (STR_LEN(prog_name) > 11) THEN
		w_error2_(fd_, 'program name too long:', STR_LEN(prog_name))
		GOTO lbl_exit0
	ENDIF

	success_ = TRUE

	-- now try to select the program
	SELECT_TPE(prog_name, stat_)
	IF ((stat_ <> 0) OR (NOT success_)) THEN
		w_error2_(fd_, 'error selecting program:', stat_)
		GOTO lbl_exit0
	ENDIF

	-- write out response document
	WRITE fd_('{"op" : "select_tpe"')

	-- BOOLEANs stringify to uppercase TRUE and FALSE, so we can't just
	-- use WRITE to stringify it for us.
	WRITE fd_(', "success" : ')
	IF (success_) THEN
		WRITE fd_('true')
	ELSE
		WRITE fd_('false')
	ENDIF

	-- end of dict (and of file)
	WRITE fd_('}', CR)

lbl_exit0::
	CLOSE FILE fd_
END dmh_selprg




ROUTINE w_error_
BEGIN
	WRITE fd('{"op" : "select_tpe", "result" : "error", "reason" : "', reason ,'"}', CR)
END w_error_




ROUTINE w_error2_
BEGIN
	WRITE fd('{"result" : "error", "reason" : "', reason , val, '"}', CR)
END w_error2_




ROUTINE check_getp_
BEGIN
	IF (UNINIT(prog_name)) THEN
		RETURN (-1)
	ENDIF
	RETURN (0)
END check_getp_




ROUTINE reset_getp_
BEGIN
	prog_name = ''
END reset_getp_
